import numpy as np, h5py 
import argparse 							#argument parsing
import os


parser = argparse.ArgumentParser(prog='GetTime_spykingcircus_0.2.py',description='Get spiketimes  preocesed in SpyKingCircus',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--resultFile',help='file experiment.result.hdf5, generated by SpyKingCircus',type=str, required=True)
parser.add_argument('--clusterFile',help='file experiment.cluster.hdf5, generated by SpyKingCircus',type=str, required=True)
parser.add_argument('--number',help='number of merge ',  default='', type=str, required=False)
parser.add_argument('--outputFolder',help='Output folder',type=str, required=True)
	 
args = parser.parse_args()
rename_electrodoes = open('rename_electronode.txt', 'r')
#rename_electrodoes = open('rename_electronode.txt', 'r')
filename = args.resultFile
clustername = args.clusterFile
outputFolder = args.outputFolder

sample = 20000.0
mintime = 20

if outputFolder[-1] != '/':
	outputFolder = outputFolder + '/'
try:
  os.mkdir( outputFolder ) 
except OSError:
  pass
lista = []
lista = rename_electrodoes.readlines()
rename_electrodoes.close()
#rint lista[1].split()[1]

hfile = h5py.File(filename,'r') 
clusterfile = h5py.File(clustername,'r') 
f = hfile.get("spiketimes")
cluster = clusterfile.get("electrodes")
cluster = np.array(cluster)
if len(cluster) < 2:
	cluster = np.transpose(cluster)


for key  in f.keys():
	data = f.get(key)
	data2 = np.array(data)/sample 
	if len(data) < mintime:
		if data2.size > mintime:
			data2 = np.transpose(data2)
		else:
			print key+': No superera el minimo de '+str(mintime)+' timestamp, dimension'+str(data2.shape)
	print key
	template = key.split("_")
	ncluster = int(cluster[int(template[1])])#-int(args.number)
	print ncluster, lista[ncluster], template
	np.savetxt(outputFolder+lista[ncluster].split()[1]+'_'+template[0]+template[1].zfill(4)+'-'+str(ncluster).zfill(3)+'.txt',data2) 
	
print "El numero del electrodo fue corregido en ",args.number," unidades"
